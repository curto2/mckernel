// Original Source Code by Meroni (https://www.github.com/Flowx08/).
// Modified by Curt√≥ & Zarza.
// c@decurto.tw z@dezarza.tw

#ifndef BITMAP_HPP
#define BITMAP_HPP

////////////////////////////////////////////////////////////
///	INCLUDES
////////////////////////////////////////////////////////////
#include <string>

class Bitmap
{
public:
	
	////////////////////////////////////////////////////////////
	/// \brief	Bitmap number of channels	
	///
	////////////////////////////////////////////////////////////
	enum Channels
	{
		MONO = 1,
		RGB = 3,
		RGBA = 4,
	};

	////////////////////////////////////////////////////////////
	/// \brief	Bitmap formats	
	///
	////////////////////////////////////////////////////////////
	enum Formats
	{
		BMP,
		TGA,
		PNG,
		PGM
	};
	
	///////////////////////////////////////////////////////////
	/// \brief Load bitmap from image
	///
	///////////////////////////////////////////////////////////
	Bitmap(std::string filepath, Channels channels);
	
	///////////////////////////////////////////////////////////
	/// \brief Load bitmap from another bitmap region
	///
	///////////////////////////////////////////////////////////
	Bitmap(Bitmap& bm_source, int x, int y, int w, int h);
	
	////////////////////////////////////////////////////////////
	/// \brief	Create bitmap from size, channels and fill color	
	/// Color example: 0xFFFFFF -> White, 0xFF0000 -> Red
	///
	////////////////////////////////////////////////////////////
	Bitmap(int w, int h, Channels channels, long color);
	
	////////////////////////////////////////////////////////////
	/// \brief	Destructor	
	///
	////////////////////////////////////////////////////////////
	~Bitmap();
	
	////////////////////////////////////////////////////////////
	/// \brief	Save bitmap to file	
	///
	////////////////////////////////////////////////////////////
	bool save(std::string filepath);	
	
	////////////////////////////////////////////////////////////
	/// \brief	Fill bitmap with a color
	/// Color example: 0xFFFFFF -> White, 0xFF0000 -> Red
	///
	////////////////////////////////////////////////////////////
	void fill(long color);

	////////////////////////////////////////////////////////////
	/// \brief Convert to mono color channel	
	///
	////////////////////////////////////////////////////////////
	void convertToMono();

	////////////////////////////////////////////////////////////
	/// \brief	Adjust contrast of the bitmap	
	///
	////////////////////////////////////////////////////////////
	void adjustContrast(float contrast);

	///////////////////////////////////////////////////////////
	/// \brief Resize bitmap content and canvas to the
	/// specified dimensions
	///
	///////////////////////////////////////////////////////////
	void resize(int w, int h);
	
	////////////////////////////////////////////////////////////
	/// \brief	Rotate bitmap around center position by the
	/// specified amount of degrees and fill the gaps with
	/// the specified color
	///
	////////////////////////////////////////////////////////////
	void rotate(const unsigned int center_x, const unsigned int center_y, const float angle, const long fill_color);

	////////////////////////////////////////////////////////////
	/// \brief	Resize bitmap content to the specified
	///	dimensions	
	///
	////////////////////////////////////////////////////////////
	void copyToRegion(Bitmap& bm_dest, int from_x, int from_y, int from_w,
						int from_h, int to_x, int to_y, int to_w, int to_h);

	////////////////////////////////////////////////////////////
	/// \brief	Filter threshold	
	///
	////////////////////////////////////////////////////////////
	void filterThreshold(int threshold);
	
	////////////////////////////////////////////////////////////
	/// \brief	Draw rect, if border_thickness = 0 then the
	/// rectangle is filled with color otherwise it's not
	///
	////////////////////////////////////////////////////////////
	void drawRect(const unsigned int x, const unsigned int y, const unsigned int width,
		const unsigned int height, const long color, const unsigned int border_thickness = 0);
	
	////////////////////////////////////////////////////////////
	/// \brief	Draw circle, if border_tickness = 0 then the
	/// circle is filled with color, otherwise it's not
	///
	////////////////////////////////////////////////////////////
	void drawCircle(const unsigned int x, const unsigned int y, const unsigned int radius,
		const long color, const unsigned int border_tickness = 0);

	///////////////////////////////////////////////////////////
	/// \brief Get bitmap data
	///
	///////////////////////////////////////////////////////////
	unsigned char* getData();

	///////////////////////////////////////////////////////////
	/// \brief Get bitmap with
	///
	///////////////////////////////////////////////////////////
	int getWidth();

	///////////////////////////////////////////////////////////
	/// \brief Get bitmap height
	///
	///////////////////////////////////////////////////////////
	int getHeight();

	///////////////////////////////////////////////////////////
	/// \brief Get number of color channels
	///
	///////////////////////////////////////////////////////////
	int getChannels();

	unsigned char* m_data;
	int m_width;
	int m_height;
	int m_channels;
};

#endif /* end of include guard: BITMAP_HPP */

